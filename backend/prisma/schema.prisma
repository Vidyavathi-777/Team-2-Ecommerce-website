// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  buyer
  seller
  admin
}



model User {
  id        String     @id @default(uuid())
  image     String?
  name      String
  email     String     @unique
  password  String
  role      Role       @default(buyer)
  createdAt DateTime   @default(now())
  phone     String?
  address   Address[]
  cartItems Cart[]
  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist[]
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  street    String
  city      String
  state     String
  zipcode   String
  country   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String
  price         Float
  stock         Int
  imageUrl      String?
  categoryId    String
  subCategoryId String?
  brandId       String?
  bestSeller    BestSeller?
  cartItems     Cart[]
  orderItems    OrderItem[]
  brand         Brand?           @relation(fields: [brandId], references: [id])
  category      Category         @relation(fields: [categoryId], references: [id])
  subcategory   SubCategory?     @relation(fields: [subCategoryId], references: [id])
  images        ProductImage[]
  variants      ProductVariant[]
  reviews       Review[]
  wishlist      Wishlist[]
}

model ProductVariant {
  id        String         @id @default(uuid())
  productId String
  sku       String         @unique
  size      String?
  color     String?
  price     Float
  stock     Int
  images    ProductImage[]
  product   Product        @relation(fields: [productId], references: [id])
}

model ProductImage {
  id        String          @id @default(uuid())
  productId String
  url       String
  variantId String?
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  products      Product[]
  subcategories SubCategory[]
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String    @unique
  categoryId String
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
}

model Cart {
  id        String  @id @default(uuid())
  userId    String
  productId String
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        String  @id @default(uuid())
  userId    String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  total         Float
  createdAt     DateTime    @default(now())
  status        String      @default("pending")
  paymentStatus String      @default("unpaid")
  user          User        @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model BestSeller {
  id        String  @id @default(uuid())
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])
}
